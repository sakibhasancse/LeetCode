/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {

  let hashSet = new Set();

  for (var i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      if (board[i][j] !== '.') {
        if (hashSet.has('row' + i + board[i][j]) || hashSet.has('col' + j + board[i][j]) || hashSet.has('box' + (i / 3 * 3 + j / 3) + board[i][j])) {
          return false;
        } else {
          hashSet.add('row' + i + board[i][j])
          hashSet.add('col' + j + board[i][j])
          hashSet.add('box' + (i / 3) * 3 + (j / 3) + board[i][j])
        }
      }

    }
  }
  console.log({ hashSet })
  return true
};

const result = isValidSudoku([
  ["5", "3", ".", ".", "7", ".", ".", ".", "."]
  , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
  , [".", "9", "8", ".", ".", ".", ".", "6", "."]
  , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
  , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
  , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
  , [".", "6", ".", ".", ".", ".", "2", "8", "."]
  , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
  , [".", ".", ".", ".", "8", ".", ".", "7", "9"]])


const result2 = isValidSudoku([
  ["5", "3", ".", ".", "7", ".", ".", ".", "."]
  , ["5", ".", ".", "1", "9", "5", ".", ".", "."]
  , [".", "9", "8", ".", ".", ".", ".", "6", "."]
  , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
  , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
  , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
  , [".", "6", ".", ".", ".", ".", "2", "8", "."]
  , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
  , [".", ".", ".", ".", "8", ".", ".", "7", "9"]])

console.log({ result, result2 })